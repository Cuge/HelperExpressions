<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE80" #>  
<#@ assembly name="EnvDTE" #>  
<#@ import namespace="EnvDTE" #>  
<#@ import namespace="EnvDTE80" #>  
<#@ import namespace="System.IO" #>  
<#@ import namespace="System.Linq" #> 
<#@ import namespace="System.Text" #> 
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.CodeDom.Compiler" #> 
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #> 

<#+
public class EnvHelperMethods
{
    private EnvDTE.DTE _DTE;

    public EnvHelperMethods(ITextTemplatingEngineHost host)
    {
        _DTE = GetEnvDTE(host);
    }

    public IList<EnvDTE.ProjectItem> GetProjectItemsRecursively(EnvDTE.ProjectItems items)
    {
        var ret = new List<EnvDTE.ProjectItem>();
        if (items == null) return ret;
        foreach (EnvDTE.ProjectItem item in items)
        {
            ret.Add(item);
            ret.AddRange(GetProjectItemsRecursively(item.ProjectItems));
        }
        return ret;
    }

    public IList<CodeClass> GetCodeClasses(EnvDTE.ProjectItems items)
    {
        IList<ProjectItem> projectItems = GetProjectItemsRecursively(items);
        List<CodeClass> ret = new List<CodeClass>();
        foreach (ProjectItem projectItem in projectItems)
        {
            ret.AddRange(GetCodeClasses(projectItem));
        }
        return ret;
    }

    public IList<CodeClass> GetCodeClasses(ProjectItem item)
    {
        List<CodeClass> ret = new List<CodeClass>();
        if(item.FileCodeModel != null)
        {
            FindClasses(item.FileCodeModel.CodeElements, ret);
        }
        return ret;
    }

    private void FindClasses(CodeElements elements, List<CodeClass> result)
    {
        if (elements == null) return;
        foreach (CodeElement element in elements)
        {
            if (element is CodeNamespace)
            {
                CodeNamespace ns = element as CodeNamespace;
                if (ns != null)
                {
                    FindClasses(ns.Members, result);
                }
            }
            else if (element is CodeClass)
            {
                CodeClass c = element as CodeClass;
                if (c != null)
                {
                    result.Add(c);
                    FindClasses(c.Members, result);
                }

            }
        }
    }

    public CodeNamespace FindNamespace(CodeElements elements)
    {
        foreach (CodeElement element in elements)
        {
            CodeNamespace ns = element as CodeNamespace;

            if (ns != null)
                return ns;
        }

        return null;
    }
    public CodeInterface FindInterface(CodeElements elements)
    {
        foreach (CodeElement element in elements)
        {
            CodeInterface codeInterface = element as CodeInterface;
            if (codeInterface != null)
                return codeInterface;
            codeInterface = FindInterface(element.Children);
            if (codeInterface != null)
                return codeInterface;
        }
        return null;
    }

    public IList<CodeFunction> FindMethods(CodeElements elements)
    {
        List<CodeFunction> methods = new List<CodeFunction>();

        foreach (CodeElement element in elements)
        {
            CodeFunction method = element as CodeFunction;

            if (method != null)
                methods.Add(method);
        }

        return methods;
    }

    public EnvDTE.DTE GetEnvDTE(ITextTemplatingEngineHost host)
    {
        IServiceProvider hostServiceProvider = (IServiceProvider)host;
        if (hostServiceProvider == null)
            throw new Exception("Host property returned unexpected value (null)");
        EnvDTE.DTE dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
        if (dte == null)
            throw new Exception("Unable to retrieve EnvDTE.DTE");
        return dte;
    }

}

#>